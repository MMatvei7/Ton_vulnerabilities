"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAll = exports.buildOne = void 0;
const path_1 = __importDefault(require("path"));
const promises_1 = __importDefault(require("fs/promises"));
const compile_1 = require("./compile/compile");
const paths_1 = require("./paths");
const utils_1 = require("./utils");
async function buildOne(contract, ui) {
    ui?.write(`Build script running, compiling ${contract}`);
    const buildArtifactPath = path_1.default.join(paths_1.BUILD_DIR, `${contract}.compiled.json`);
    try {
        await promises_1.default.unlink(buildArtifactPath);
    }
    catch (e) { }
    ui?.setActionPrompt('⏳ Compiling...');
    try {
        const result = await (0, compile_1.doCompile)(contract);
        if (result.lang === 'tact') {
            for (const [k, v] of result.fs) {
                await promises_1.default.mkdir(path_1.default.dirname(k), {
                    recursive: true,
                });
                await promises_1.default.writeFile(k, v);
            }
            if (result.options !== undefined && result.options?.debug === true) {
                ui?.clearActionPrompt();
                ui?.write('\n⚠️ Make sure to disable debug mode in contract wrappers before doing production deployments!');
            }
        }
        const cell = result.code;
        const rHash = cell.hash();
        const res = {
            hash: rHash.toString('hex'),
            hashBase64: rHash.toString('base64'),
            hex: cell.toBoc().toString('hex'),
        };
        ui?.clearActionPrompt();
        if (result.lang === 'tolk') {
            ui?.write(`\n${result.stderr}`);
        }
        ui?.write('\n✅ Compiled successfully! Cell BOC result:\n\n');
        ui?.write(JSON.stringify(res, null, 2));
        await promises_1.default.mkdir(paths_1.BUILD_DIR, { recursive: true });
        await promises_1.default.writeFile(buildArtifactPath, JSON.stringify(res));
        if (result.lang === 'func' || result.lang === 'tolk') {
            const fiftFilepath = path_1.default.join(paths_1.BUILD_DIR, contract, `${contract}.fif`);
            await promises_1.default.mkdir(path_1.default.join(paths_1.BUILD_DIR, contract), { recursive: true });
            await promises_1.default.writeFile(fiftFilepath, result.fiftCode);
        }
        ui?.write(`\n✅ Wrote compilation artifact to ${path_1.default.relative(process.cwd(), buildArtifactPath)}`);
    }
    catch (e) {
        if (ui) {
            ui?.clearActionPrompt();
            ui?.write(e.toString());
            process.exit(1);
        }
        else {
            throw e;
        }
    }
}
exports.buildOne = buildOne;
async function buildAll(ui) {
    for (const file of await (0, utils_1.findCompiles)()) {
        await buildOne(file.name, ui);
    }
}
exports.buildAll = buildAll;
