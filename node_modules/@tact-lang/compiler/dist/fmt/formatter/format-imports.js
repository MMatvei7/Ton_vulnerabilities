"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatImports = void 0;
const cst_helpers_1 = require("../cst/cst-helpers");
const format_expressions_1 = require("./format-expressions");
const format_doc_comments_1 = require("./format-doc-comments");
const format_comments_1 = require("./format-comments");
const formatImports = (code, importsNode) => {
    const imports = (0, cst_helpers_1.childrenByType)(importsNode, "Import");
    if (imports.length === 0)
        return;
    let needNewLine = false;
    for (const item of importsNode.children) {
        if (item.$ === "leaf")
            continue;
        if (needNewLine) {
            code.newLine();
            needNewLine = false;
        }
        if (item.type === "Import") {
            formatImport(code, item);
            code.newLine();
            const newlines = (0, cst_helpers_1.trailingNewlines)(item);
            if (newlines > 1) {
                needNewLine = true;
            }
        }
    }
    code.newLine();
};
exports.formatImports = formatImports;
const formatImport = (code, node) => {
    (0, format_doc_comments_1.formatDocComments)(code, node);
    const path = (0, cst_helpers_1.childByField)(node, "path");
    if (!path) {
        throw new Error("Invalid import node structure");
    }
    const value = (0, cst_helpers_1.childByField)(path, "value");
    if (!value) {
        throw new Error("Invalid import node structure");
    }
    code.add("import");
    code.space();
    (0, format_expressions_1.formatExpression)(code, path);
    code.add(";");
    // process trailing comments after `;`
    const semicolonIndex = (0, cst_helpers_1.childLeafIdxWithText)(node, ";");
    (0, format_comments_1.formatTrailingComments)(code, node, semicolonIndex, true);
};
