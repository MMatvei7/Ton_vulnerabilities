import type { FactoryAst } from "../ast-helpers";
import type * as Ast from "../ast";
import type { SrcInfo } from "../../grammar";
import type * as TonCore from "@ton/core";
export declare const getMakeAst: (astF: FactoryAst) => {
    makePrimitiveTypeDecl: (p_name: Ast.Id, p_loc: SrcInfo) => Ast.PrimitiveTypeDecl;
    makeDummyPrimitiveTypeDecl: (p_name: Ast.Id) => Ast.PrimitiveTypeDecl;
    makeFunctionDef: (p_attributes: readonly Ast.FunctionAttribute[], p_name: Ast.Id, p_return: Ast.Type | undefined, p_params: readonly Ast.TypedParameter[], p_statements: readonly Ast.Statement[], p_loc: SrcInfo) => Ast.FunctionDef;
    makeDummyFunctionDef: (p_attributes: readonly Ast.FunctionAttribute[], p_name: Ast.Id, p_return: Ast.Type | undefined, p_params: readonly Ast.TypedParameter[], p_statements: readonly Ast.Statement[]) => Ast.FunctionDef;
    makeAsmFunctionDef: (p_shuffle: Ast.AsmShuffle, p_attributes: readonly Ast.FunctionAttribute[], p_name: Ast.Id, p_return: Ast.Type | undefined, p_params: readonly Ast.TypedParameter[], p_instructions: readonly Ast.AsmInstruction[], p_loc: SrcInfo) => Ast.AsmFunctionDef;
    makeDummyAsmFunctionDef: (p_shuffle: Ast.AsmShuffle, p_attributes: readonly Ast.FunctionAttribute[], p_name: Ast.Id, p_return: Ast.Type | undefined, p_params: readonly Ast.TypedParameter[], p_instructions: readonly Ast.AsmInstruction[]) => Ast.AsmFunctionDef;
    makeNativeFunctionDecl: (p_attributes: readonly Ast.FunctionAttribute[], p_name: Ast.Id, p_nativeName: Ast.FuncId, p_params: readonly Ast.TypedParameter[], p_return: Ast.Type | undefined, p_loc: SrcInfo) => Ast.NativeFunctionDecl;
    makeDummyNativeFunctionDecl: (p_attributes: readonly Ast.FunctionAttribute[], p_name: Ast.Id, p_nativeName: Ast.FuncId, p_params: readonly Ast.TypedParameter[], p_return: Ast.Type | undefined) => Ast.NativeFunctionDecl;
    makeConstantDef: (p_attributes: readonly Ast.ConstantAttribute[], p_name: Ast.Id, p_type: Ast.Type, p_initializer: Ast.Expression, p_loc: SrcInfo) => Ast.ConstantDef;
    makeDummyConstantDef: (p_attributes: readonly Ast.ConstantAttribute[], p_name: Ast.Id, p_type: Ast.Type, p_initializer: Ast.Expression) => Ast.ConstantDef;
    makeStructDecl: (p_name: Ast.Id, p_fields: readonly Ast.FieldDecl[], p_loc: SrcInfo) => Ast.StructDecl;
    makeDummyStructDecl: (p_name: Ast.Id, p_fields: readonly Ast.FieldDecl[]) => Ast.StructDecl;
    makeMessageDecl: (p_name: Ast.Id, p_opcode: Ast.Expression | undefined, p_fields: readonly Ast.FieldDecl[], p_loc: SrcInfo) => Ast.MessageDecl;
    makeDummyMessageDecl: (p_name: Ast.Id, p_opcode: Ast.Expression | undefined, p_fields: readonly Ast.FieldDecl[]) => Ast.MessageDecl;
    makeContract: (p_name: Ast.Id, p_traits: readonly Ast.Id[], p_attributes: readonly Ast.ContractAttribute[], p_params: undefined | readonly Ast.FieldDecl[], p_declarations: readonly Ast.ContractDeclaration[], p_loc: SrcInfo) => Ast.Contract;
    makeDummyContract: (p_name: Ast.Id, p_traits: readonly Ast.Id[], p_attributes: readonly Ast.ContractAttribute[], p_params: undefined | readonly Ast.FieldDecl[], p_declarations: readonly Ast.ContractDeclaration[]) => Ast.Contract;
    makeTrait: (p_name: Ast.Id, p_traits: readonly Ast.Id[], p_attributes: readonly Ast.ContractAttribute[], p_declarations: readonly Ast.TraitDeclaration[], p_loc: SrcInfo) => Ast.Trait;
    makeDummyTrait: (p_name: Ast.Id, p_traits: readonly Ast.Id[], p_attributes: readonly Ast.ContractAttribute[], p_declarations: readonly Ast.TraitDeclaration[]) => Ast.Trait;
    makeFieldDecl: (p_name: Ast.Id, p_type: Ast.Type, p_initializer: Ast.Expression | undefined, p_as: Ast.Id | undefined, p_loc: SrcInfo) => Ast.FieldDecl;
    makeDummyFieldDecl: (p_name: Ast.Id, p_type: Ast.Type, p_initializer: Ast.Expression | undefined, p_as: Ast.Id | undefined) => Ast.FieldDecl;
    makeContractInit: (p_params: readonly Ast.TypedParameter[], p_statements: readonly Ast.Statement[], p_loc: SrcInfo) => Ast.ContractInit;
    makeDummyContractInit: (p_params: readonly Ast.TypedParameter[], p_statements: readonly Ast.Statement[]) => Ast.ContractInit;
    makeReceiver: (p_selector: Ast.ReceiverKind, p_statements: readonly Ast.Statement[], p_loc: SrcInfo) => Ast.Receiver;
    makeDummyReceiver: (p_selector: Ast.ReceiverKind, p_statements: readonly Ast.Statement[]) => Ast.Receiver;
    makeFunctionDecl: (p_attributes: readonly Ast.FunctionAttribute[], p_name: Ast.Id, p_return: Ast.Type | undefined, p_params: readonly Ast.TypedParameter[], p_loc: SrcInfo) => Ast.FunctionDecl;
    makeDummyFunctionDecl: (p_attributes: readonly Ast.FunctionAttribute[], p_name: Ast.Id, p_return: Ast.Type | undefined, p_params: readonly Ast.TypedParameter[]) => Ast.FunctionDecl;
    makeConstantDecl: (p_attributes: readonly Ast.ConstantAttribute[], p_name: Ast.Id, p_type: Ast.Type, p_loc: SrcInfo) => Ast.ConstantDecl;
    makeDummyConstantDecl: (p_attributes: readonly Ast.ConstantAttribute[], p_name: Ast.Id, p_type: Ast.Type) => Ast.ConstantDecl;
    makeStatementLet: (p_name: Ast.OptionalId, p_type: Ast.Type | undefined, p_expression: Ast.Expression, p_loc: SrcInfo) => Ast.StatementLet;
    makeDummyStatementLet: (p_name: Ast.OptionalId, p_type: Ast.Type | undefined, p_expression: Ast.Expression) => Ast.StatementLet;
    makeStatementReturn: (p_expression: Ast.Expression | undefined, p_loc: SrcInfo) => Ast.StatementReturn;
    makeDummyStatementReturn: (p_expression: Ast.Expression | undefined) => Ast.StatementReturn;
    makeStatementExpression: (p_expression: Ast.Expression, p_loc: SrcInfo) => Ast.StatementExpression;
    makeDummyStatementExpression: (p_expression: Ast.Expression) => Ast.StatementExpression;
    makeStatementAssign: (p_path: Ast.Expression, p_expression: Ast.Expression, p_loc: SrcInfo) => Ast.StatementAssign;
    makeDummyStatementAssign: (p_path: Ast.Expression, p_expression: Ast.Expression) => Ast.StatementAssign;
    makeStatementAugmentedAssign: (p_op: Ast.AugmentedAssignOperation, p_path: Ast.Expression, p_expression: Ast.Expression, p_loc: SrcInfo) => Ast.StatementAugmentedAssign;
    makeDummyStatementAugmentedAssign: (p_op: Ast.AugmentedAssignOperation, p_path: Ast.Expression, p_expression: Ast.Expression) => Ast.StatementAugmentedAssign;
    makeStatementCondition: (p_condition: Ast.Expression, p_trueStatements: readonly Ast.Statement[], p_falseStatements: readonly Ast.Statement[] | undefined, p_loc: SrcInfo) => Ast.StatementCondition;
    makeDummyStatementCondition: (p_condition: Ast.Expression, p_trueStatements: readonly Ast.Statement[], p_falseStatements: readonly Ast.Statement[] | undefined) => Ast.StatementCondition;
    makeStatementWhile: (p_condition: Ast.Expression, p_statements: readonly Ast.Statement[], p_loc: SrcInfo) => Ast.StatementWhile;
    makeDummyStatementWhile: (p_condition: Ast.Expression, p_statements: readonly Ast.Statement[]) => Ast.StatementWhile;
    makeStatementUntil: (p_condition: Ast.Expression, p_statements: readonly Ast.Statement[], p_loc: SrcInfo) => Ast.StatementUntil;
    makeDummyStatementUntil: (p_condition: Ast.Expression, p_statements: readonly Ast.Statement[]) => Ast.StatementUntil;
    makeStatementRepeat: (p_iterations: Ast.Expression, p_statements: readonly Ast.Statement[], p_loc: SrcInfo) => Ast.StatementRepeat;
    makeDummyStatementRepeat: (p_iterations: Ast.Expression, p_statements: readonly Ast.Statement[]) => Ast.StatementRepeat;
    makeStatementTry: (p_statements: readonly Ast.Statement[], p_catchBlock: Ast.CatchBlock | undefined, p_loc: SrcInfo) => Ast.StatementTry;
    makeDummyStatementTry: (p_statements: readonly Ast.Statement[], p_catchBlock: Ast.CatchBlock | undefined) => Ast.StatementTry;
    makeStatementForEach: (p_keyName: Ast.OptionalId, p_valueName: Ast.OptionalId, p_map: Ast.Expression, p_statements: readonly Ast.Statement[], p_loc: SrcInfo) => Ast.StatementForEach;
    makeDummyStatementForEach: (p_keyName: Ast.OptionalId, p_valueName: Ast.OptionalId, p_map: Ast.Expression, p_statements: readonly Ast.Statement[]) => Ast.StatementForEach;
    makeStatementDestruct: (p_type: Ast.TypeId, p_identifiers: ReadonlyMap<string, readonly [Ast.Id, Ast.OptionalId]>, p_ignoreUnspecifiedFields: boolean, p_expression: Ast.Expression, p_loc: SrcInfo) => Ast.StatementDestruct;
    makeDummyStatementDestruct: (p_type: Ast.TypeId, p_identifiers: ReadonlyMap<string, readonly [Ast.Id, Ast.OptionalId]>, p_ignoreUnspecifiedFields: boolean, p_expression: Ast.Expression) => Ast.StatementDestruct;
    makeStatementBlock: (p_statements: readonly Ast.Statement[], p_loc: SrcInfo) => Ast.StatementBlock;
    makeDummyStatementBlock: (p_statements: readonly Ast.Statement[]) => Ast.StatementBlock;
    makeTypeId: (p_text: string, p_loc: SrcInfo) => Ast.TypeId;
    makeDummyTypeId: (p_text: string) => Ast.TypeId;
    makeOptionalType: (p_typeArg: Ast.Type, p_loc: SrcInfo) => Ast.OptionalType;
    makeDummyOptionalType: (p_typeArg: Ast.Type) => Ast.OptionalType;
    makeMapType: (p_keyType: Ast.TypeId, p_keyStorageType: Ast.Id | undefined, p_valueType: Ast.TypeId, p_valueStorageType: Ast.Id | undefined, p_loc: SrcInfo) => Ast.MapType;
    makeDummyMapType: (p_keyType: Ast.TypeId, p_keyStorageType: Ast.Id | undefined, p_valueType: Ast.TypeId, p_valueStorageType: Ast.Id | undefined) => Ast.MapType;
    makeBouncedMessageType: (p_messageType: Ast.TypeId, p_loc: SrcInfo) => Ast.BouncedMessageType;
    makeDummyBouncedMessageType: (p_messageType: Ast.TypeId) => Ast.BouncedMessageType;
    makeOpBinary: (p_op: Ast.BinaryOperation, p_left: Ast.Expression, p_right: Ast.Expression, p_loc: SrcInfo) => Ast.OpBinary;
    makeDummyOpBinary: (p_op: Ast.BinaryOperation, p_left: Ast.Expression, p_right: Ast.Expression) => Ast.OpBinary;
    makeOpUnary: (p_op: Ast.UnaryOperation, p_operand: Ast.Expression, p_loc: SrcInfo) => Ast.OpUnary;
    makeDummyOpUnary: (p_op: Ast.UnaryOperation, p_operand: Ast.Expression) => Ast.OpUnary;
    makeConditional: (p_condition: Ast.Expression, p_thenBranch: Ast.Expression, p_elseBranch: Ast.Expression, p_loc: SrcInfo) => Ast.Conditional;
    makeDummyConditional: (p_condition: Ast.Expression, p_thenBranch: Ast.Expression, p_elseBranch: Ast.Expression) => Ast.Conditional;
    makeMethodCall: (p_self: Ast.Expression, p_method: Ast.Id, p_args: readonly Ast.Expression[], p_loc: SrcInfo) => Ast.MethodCall;
    makeDummyMethodCall: (p_self: Ast.Expression, p_method: Ast.Id, p_args: readonly Ast.Expression[]) => Ast.MethodCall;
    makeFieldAccess: (p_aggregate: Ast.Expression, p_field: Ast.Id, p_loc: SrcInfo) => Ast.FieldAccess;
    makeDummyFieldAccess: (p_aggregate: Ast.Expression, p_field: Ast.Id) => Ast.FieldAccess;
    makeStaticCall: (p_function: Ast.Id, p_args: readonly Ast.Expression[], p_loc: SrcInfo) => Ast.StaticCall;
    makeDummyStaticCall: (p_function: Ast.Id, p_args: readonly Ast.Expression[]) => Ast.StaticCall;
    makeStructInstance: (p_type: Ast.Id, p_args: readonly Ast.StructFieldInitializer[], p_loc: SrcInfo) => Ast.StructInstance;
    makeDummyStructInstance: (p_type: Ast.Id, p_args: readonly Ast.StructFieldInitializer[]) => Ast.StructInstance;
    makeId: (p_text: string, p_loc: SrcInfo) => Ast.Id;
    makeDummyId: (p_text: string) => Ast.Id;
    makeInitOf: (p_contract: Ast.Id, p_args: readonly Ast.Expression[], p_loc: SrcInfo) => Ast.InitOf;
    makeDummyInitOf: (p_contract: Ast.Id, p_args: readonly Ast.Expression[]) => Ast.InitOf;
    makeCodeOf: (p_contract: Ast.Id, p_loc: SrcInfo) => Ast.CodeOf;
    makeDummyCodeOf: (p_contract: Ast.Id) => Ast.CodeOf;
    makeNumber: (p_base: Ast.NumberBase, p_value: bigint, p_loc: SrcInfo) => Ast.Number;
    makeDummyNumber: (p_base: Ast.NumberBase, p_value: bigint) => Ast.Number;
    makeBoolean: (p_value: boolean, p_loc: SrcInfo) => Ast.Boolean;
    makeDummyBoolean: (p_value: boolean) => Ast.Boolean;
    makeNull: (p_loc: SrcInfo) => Ast.Null;
    makeDummyNull: () => Ast.Null;
    makeString: (p_value: string, p_loc: SrcInfo) => Ast.String;
    makeDummyString: (p_value: string) => Ast.String;
    makeAddress: (p_value: TonCore.Address, p_loc: SrcInfo) => Ast.Address;
    makeDummyAddress: (p_value: TonCore.Address) => Ast.Address;
    makeCell: (p_value: TonCore.Cell, p_loc: SrcInfo) => Ast.Cell;
    makeDummyCell: (p_value: TonCore.Cell) => Ast.Cell;
    makeSlice: (p_value: TonCore.Slice, p_loc: SrcInfo) => Ast.Slice;
    makeDummySlice: (p_value: TonCore.Slice) => Ast.Slice;
    makeStructValue: (p_type: Ast.Id, p_args: readonly Ast.StructFieldValue[], p_loc: SrcInfo) => Ast.StructValue;
    makeDummyStructValue: (p_type: Ast.Id, p_args: readonly Ast.StructFieldValue[]) => Ast.StructValue;
    makeWildcard: (p_loc: SrcInfo) => Ast.Wildcard;
    makeDummyWildcard: () => Ast.Wildcard;
    makeFunctionAttributeGet: (p_methodId: Ast.Expression | undefined, p_loc: SrcInfo) => Ast.FunctionAttributeGet;
    makeDummyFunctionAttributeGet: (p_methodId: Ast.Expression | undefined) => Ast.FunctionAttributeGet;
    makeFunctionAttributeRest: (p_type: Ast.FunctionAttributeName, p_loc: SrcInfo) => Ast.FunctionAttributeRest;
    makeDummyFunctionAttributeRest: (p_type: Ast.FunctionAttributeName) => Ast.FunctionAttributeRest;
    makeReceiverSimple: (p_param: Ast.TypedParameter) => Ast.ReceiverSimple;
    makeReceiverFallback: () => Ast.ReceiverFallback;
    makeReceiverComment: (p_comment: Ast.String) => Ast.ReceiverComment;
    makeReceiverInternal: (p_subKind: Ast.ReceiverSubKind, p_loc: SrcInfo) => Ast.ReceiverInternal;
    makeDummyReceiverInternal: (p_subKind: Ast.ReceiverSubKind) => Ast.ReceiverInternal;
    makeReceiverExternal: (p_subKind: Ast.ReceiverSubKind, p_loc: SrcInfo) => Ast.ReceiverExternal;
    makeDummyReceiverExternal: (p_subKind: Ast.ReceiverSubKind) => Ast.ReceiverExternal;
    makeReceiverBounce: (p_param: Ast.TypedParameter, p_loc: SrcInfo) => Ast.ReceiverBounce;
    makeDummyReceiverBounce: (p_param: Ast.TypedParameter) => Ast.ReceiverBounce;
    makeFuncId: (p_text: string, p_loc: SrcInfo) => Ast.FuncId;
    makeDummyFuncId: (p_text: string) => Ast.FuncId;
    makeDestructMapping: (p_field: Ast.Id, p_name: Ast.Id, p_loc: SrcInfo) => Ast.DestructMapping;
    makeDummyDestructMapping: (p_field: Ast.Id, p_name: Ast.Id) => Ast.DestructMapping;
    makeDestructEnd: (p_ignoreUnspecifiedFields: boolean, p_loc: SrcInfo) => Ast.DestructEnd;
    makeDummyDestructEnd: (p_ignoreUnspecifiedFields: boolean) => Ast.DestructEnd;
    makeTypedParameter: (p_name: Ast.OptionalId, p_type: Ast.Type, p_loc: SrcInfo) => Ast.TypedParameter;
    makeDummyTypedParameter: (p_name: Ast.OptionalId, p_type: Ast.Type) => Ast.TypedParameter;
    makeModule: (p_imports: readonly Ast.Import[], p_items: readonly Ast.ModuleItem[]) => Ast.Module;
    makeStructFieldInitializer: (p_field: Ast.Id, p_initializer: Ast.Expression, p_loc: SrcInfo) => Ast.StructFieldInitializer;
    makeDummyStructFieldInitializer: (p_field: Ast.Id, p_initializer: Ast.Expression) => Ast.StructFieldInitializer;
    makeStructFieldValue: (p_field: Ast.Id, p_initializer: Ast.Literal, p_loc: SrcInfo) => Ast.StructFieldValue;
    makeDummyStructFieldValue: (p_field: Ast.Id, p_initializer: Ast.Literal) => Ast.StructFieldValue;
    makeImport: (p_importPath: Ast.ImportPath, p_loc: SrcInfo) => Ast.Import;
    makeDummyImport: (p_importPath: Ast.ImportPath) => Ast.Import;
};
export type MakeAstFactory = ReturnType<typeof getMakeAst>;
