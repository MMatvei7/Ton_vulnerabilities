"use strict";
// THIS IS AN AUTOGENERATED FILE. TO GENERATE IT AGAIN, EXECUTE yarn gen:make-funs
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMakeAst = void 0;
const src_info_1 = require("../../grammar/src-info");
const getMakeAst = (astF) => {
    const emptySrcInfo = (0, src_info_1.getSrcInfo)(" ", 0, 0, null, "user");
    function makePrimitiveTypeDecl(p_name, p_loc) {
        return astF.createNode({
            kind: "primitive_type_decl",
            name: p_name,
            loc: p_loc,
        });
    }
    function makeDummyPrimitiveTypeDecl(p_name) {
        return astF.createNode({
            kind: "primitive_type_decl",
            name: p_name,
            loc: emptySrcInfo,
        });
    }
    function makeFunctionDef(p_attributes, p_name, p_return, p_params, p_statements, p_loc) {
        return astF.createNode({
            kind: "function_def",
            attributes: p_attributes,
            name: p_name,
            return: p_return,
            params: p_params,
            statements: p_statements,
            loc: p_loc,
        });
    }
    function makeDummyFunctionDef(p_attributes, p_name, p_return, p_params, p_statements) {
        return astF.createNode({
            kind: "function_def",
            attributes: p_attributes,
            name: p_name,
            return: p_return,
            params: p_params,
            statements: p_statements,
            loc: emptySrcInfo,
        });
    }
    function makeAsmFunctionDef(p_shuffle, p_attributes, p_name, p_return, p_params, p_instructions, p_loc) {
        return astF.createNode({
            kind: "asm_function_def",
            shuffle: p_shuffle,
            attributes: p_attributes,
            name: p_name,
            return: p_return,
            params: p_params,
            instructions: p_instructions,
            loc: p_loc,
        });
    }
    function makeDummyAsmFunctionDef(p_shuffle, p_attributes, p_name, p_return, p_params, p_instructions) {
        return astF.createNode({
            kind: "asm_function_def",
            shuffle: p_shuffle,
            attributes: p_attributes,
            name: p_name,
            return: p_return,
            params: p_params,
            instructions: p_instructions,
            loc: emptySrcInfo,
        });
    }
    function makeNativeFunctionDecl(p_attributes, p_name, p_nativeName, p_params, p_return, p_loc) {
        return astF.createNode({
            kind: "native_function_decl",
            attributes: p_attributes,
            name: p_name,
            nativeName: p_nativeName,
            params: p_params,
            return: p_return,
            loc: p_loc,
        });
    }
    function makeDummyNativeFunctionDecl(p_attributes, p_name, p_nativeName, p_params, p_return) {
        return astF.createNode({
            kind: "native_function_decl",
            attributes: p_attributes,
            name: p_name,
            nativeName: p_nativeName,
            params: p_params,
            return: p_return,
            loc: emptySrcInfo,
        });
    }
    function makeConstantDef(p_attributes, p_name, p_type, p_initializer, p_loc) {
        return astF.createNode({
            kind: "constant_def",
            attributes: p_attributes,
            name: p_name,
            type: p_type,
            initializer: p_initializer,
            loc: p_loc,
        });
    }
    function makeDummyConstantDef(p_attributes, p_name, p_type, p_initializer) {
        return astF.createNode({
            kind: "constant_def",
            attributes: p_attributes,
            name: p_name,
            type: p_type,
            initializer: p_initializer,
            loc: emptySrcInfo,
        });
    }
    function makeStructDecl(p_name, p_fields, p_loc) {
        return astF.createNode({
            kind: "struct_decl",
            name: p_name,
            fields: p_fields,
            loc: p_loc,
        });
    }
    function makeDummyStructDecl(p_name, p_fields) {
        return astF.createNode({
            kind: "struct_decl",
            name: p_name,
            fields: p_fields,
            loc: emptySrcInfo,
        });
    }
    function makeMessageDecl(p_name, p_opcode, p_fields, p_loc) {
        return astF.createNode({
            kind: "message_decl",
            name: p_name,
            opcode: p_opcode,
            fields: p_fields,
            loc: p_loc,
        });
    }
    function makeDummyMessageDecl(p_name, p_opcode, p_fields) {
        return astF.createNode({
            kind: "message_decl",
            name: p_name,
            opcode: p_opcode,
            fields: p_fields,
            loc: emptySrcInfo,
        });
    }
    function makeContract(p_name, p_traits, p_attributes, p_params, p_declarations, p_loc) {
        return astF.createNode({
            kind: "contract",
            name: p_name,
            traits: p_traits,
            attributes: p_attributes,
            params: p_params,
            declarations: p_declarations,
            loc: p_loc,
        });
    }
    function makeDummyContract(p_name, p_traits, p_attributes, p_params, p_declarations) {
        return astF.createNode({
            kind: "contract",
            name: p_name,
            traits: p_traits,
            attributes: p_attributes,
            params: p_params,
            declarations: p_declarations,
            loc: emptySrcInfo,
        });
    }
    function makeTrait(p_name, p_traits, p_attributes, p_declarations, p_loc) {
        return astF.createNode({
            kind: "trait",
            name: p_name,
            traits: p_traits,
            attributes: p_attributes,
            declarations: p_declarations,
            loc: p_loc,
        });
    }
    function makeDummyTrait(p_name, p_traits, p_attributes, p_declarations) {
        return astF.createNode({
            kind: "trait",
            name: p_name,
            traits: p_traits,
            attributes: p_attributes,
            declarations: p_declarations,
            loc: emptySrcInfo,
        });
    }
    function makeFieldDecl(p_name, p_type, p_initializer, p_as, p_loc) {
        return astF.createNode({
            kind: "field_decl",
            name: p_name,
            type: p_type,
            initializer: p_initializer,
            as: p_as,
            loc: p_loc,
        });
    }
    function makeDummyFieldDecl(p_name, p_type, p_initializer, p_as) {
        return astF.createNode({
            kind: "field_decl",
            name: p_name,
            type: p_type,
            initializer: p_initializer,
            as: p_as,
            loc: emptySrcInfo,
        });
    }
    function makeContractInit(p_params, p_statements, p_loc) {
        return astF.createNode({
            kind: "contract_init",
            params: p_params,
            statements: p_statements,
            loc: p_loc,
        });
    }
    function makeDummyContractInit(p_params, p_statements) {
        return astF.createNode({
            kind: "contract_init",
            params: p_params,
            statements: p_statements,
            loc: emptySrcInfo,
        });
    }
    function makeReceiver(p_selector, p_statements, p_loc) {
        return astF.createNode({
            kind: "receiver",
            selector: p_selector,
            statements: p_statements,
            loc: p_loc,
        });
    }
    function makeDummyReceiver(p_selector, p_statements) {
        return astF.createNode({
            kind: "receiver",
            selector: p_selector,
            statements: p_statements,
            loc: emptySrcInfo,
        });
    }
    function makeFunctionDecl(p_attributes, p_name, p_return, p_params, p_loc) {
        return astF.createNode({
            kind: "function_decl",
            attributes: p_attributes,
            name: p_name,
            return: p_return,
            params: p_params,
            loc: p_loc,
        });
    }
    function makeDummyFunctionDecl(p_attributes, p_name, p_return, p_params) {
        return astF.createNode({
            kind: "function_decl",
            attributes: p_attributes,
            name: p_name,
            return: p_return,
            params: p_params,
            loc: emptySrcInfo,
        });
    }
    function makeConstantDecl(p_attributes, p_name, p_type, p_loc) {
        return astF.createNode({
            kind: "constant_decl",
            attributes: p_attributes,
            name: p_name,
            type: p_type,
            loc: p_loc,
        });
    }
    function makeDummyConstantDecl(p_attributes, p_name, p_type) {
        return astF.createNode({
            kind: "constant_decl",
            attributes: p_attributes,
            name: p_name,
            type: p_type,
            loc: emptySrcInfo,
        });
    }
    function makeStatementLet(p_name, p_type, p_expression, p_loc) {
        return astF.createNode({
            kind: "statement_let",
            name: p_name,
            type: p_type,
            expression: p_expression,
            loc: p_loc,
        });
    }
    function makeDummyStatementLet(p_name, p_type, p_expression) {
        return astF.createNode({
            kind: "statement_let",
            name: p_name,
            type: p_type,
            expression: p_expression,
            loc: emptySrcInfo,
        });
    }
    function makeStatementReturn(p_expression, p_loc) {
        return astF.createNode({
            kind: "statement_return",
            expression: p_expression,
            loc: p_loc,
        });
    }
    function makeDummyStatementReturn(p_expression) {
        return astF.createNode({
            kind: "statement_return",
            expression: p_expression,
            loc: emptySrcInfo,
        });
    }
    function makeStatementExpression(p_expression, p_loc) {
        return astF.createNode({
            kind: "statement_expression",
            expression: p_expression,
            loc: p_loc,
        });
    }
    function makeDummyStatementExpression(p_expression) {
        return astF.createNode({
            kind: "statement_expression",
            expression: p_expression,
            loc: emptySrcInfo,
        });
    }
    function makeStatementAssign(p_path, p_expression, p_loc) {
        return astF.createNode({
            kind: "statement_assign",
            path: p_path,
            expression: p_expression,
            loc: p_loc,
        });
    }
    function makeDummyStatementAssign(p_path, p_expression) {
        return astF.createNode({
            kind: "statement_assign",
            path: p_path,
            expression: p_expression,
            loc: emptySrcInfo,
        });
    }
    function makeStatementAugmentedAssign(p_op, p_path, p_expression, p_loc) {
        return astF.createNode({
            kind: "statement_augmentedassign",
            op: p_op,
            path: p_path,
            expression: p_expression,
            loc: p_loc,
        });
    }
    function makeDummyStatementAugmentedAssign(p_op, p_path, p_expression) {
        return astF.createNode({
            kind: "statement_augmentedassign",
            op: p_op,
            path: p_path,
            expression: p_expression,
            loc: emptySrcInfo,
        });
    }
    function makeStatementCondition(p_condition, p_trueStatements, p_falseStatements, p_loc) {
        return astF.createNode({
            kind: "statement_condition",
            condition: p_condition,
            trueStatements: p_trueStatements,
            falseStatements: p_falseStatements,
            loc: p_loc,
        });
    }
    function makeDummyStatementCondition(p_condition, p_trueStatements, p_falseStatements) {
        return astF.createNode({
            kind: "statement_condition",
            condition: p_condition,
            trueStatements: p_trueStatements,
            falseStatements: p_falseStatements,
            loc: emptySrcInfo,
        });
    }
    function makeStatementWhile(p_condition, p_statements, p_loc) {
        return astF.createNode({
            kind: "statement_while",
            condition: p_condition,
            statements: p_statements,
            loc: p_loc,
        });
    }
    function makeDummyStatementWhile(p_condition, p_statements) {
        return astF.createNode({
            kind: "statement_while",
            condition: p_condition,
            statements: p_statements,
            loc: emptySrcInfo,
        });
    }
    function makeStatementUntil(p_condition, p_statements, p_loc) {
        return astF.createNode({
            kind: "statement_until",
            condition: p_condition,
            statements: p_statements,
            loc: p_loc,
        });
    }
    function makeDummyStatementUntil(p_condition, p_statements) {
        return astF.createNode({
            kind: "statement_until",
            condition: p_condition,
            statements: p_statements,
            loc: emptySrcInfo,
        });
    }
    function makeStatementRepeat(p_iterations, p_statements, p_loc) {
        return astF.createNode({
            kind: "statement_repeat",
            iterations: p_iterations,
            statements: p_statements,
            loc: p_loc,
        });
    }
    function makeDummyStatementRepeat(p_iterations, p_statements) {
        return astF.createNode({
            kind: "statement_repeat",
            iterations: p_iterations,
            statements: p_statements,
            loc: emptySrcInfo,
        });
    }
    function makeStatementTry(p_statements, p_catchBlock, p_loc) {
        return astF.createNode({
            kind: "statement_try",
            statements: p_statements,
            catchBlock: p_catchBlock,
            loc: p_loc,
        });
    }
    function makeDummyStatementTry(p_statements, p_catchBlock) {
        return astF.createNode({
            kind: "statement_try",
            statements: p_statements,
            catchBlock: p_catchBlock,
            loc: emptySrcInfo,
        });
    }
    function makeStatementForEach(p_keyName, p_valueName, p_map, p_statements, p_loc) {
        return astF.createNode({
            kind: "statement_foreach",
            keyName: p_keyName,
            valueName: p_valueName,
            map: p_map,
            statements: p_statements,
            loc: p_loc,
        });
    }
    function makeDummyStatementForEach(p_keyName, p_valueName, p_map, p_statements) {
        return astF.createNode({
            kind: "statement_foreach",
            keyName: p_keyName,
            valueName: p_valueName,
            map: p_map,
            statements: p_statements,
            loc: emptySrcInfo,
        });
    }
    function makeStatementDestruct(p_type, p_identifiers, p_ignoreUnspecifiedFields, p_expression, p_loc) {
        return astF.createNode({
            kind: "statement_destruct",
            type: p_type,
            identifiers: p_identifiers,
            ignoreUnspecifiedFields: p_ignoreUnspecifiedFields,
            expression: p_expression,
            loc: p_loc,
        });
    }
    function makeDummyStatementDestruct(p_type, p_identifiers, p_ignoreUnspecifiedFields, p_expression) {
        return astF.createNode({
            kind: "statement_destruct",
            type: p_type,
            identifiers: p_identifiers,
            ignoreUnspecifiedFields: p_ignoreUnspecifiedFields,
            expression: p_expression,
            loc: emptySrcInfo,
        });
    }
    function makeStatementBlock(p_statements, p_loc) {
        return astF.createNode({
            kind: "statement_block",
            statements: p_statements,
            loc: p_loc,
        });
    }
    function makeDummyStatementBlock(p_statements) {
        return astF.createNode({
            kind: "statement_block",
            statements: p_statements,
            loc: emptySrcInfo,
        });
    }
    function makeTypeId(p_text, p_loc) {
        return astF.createNode({
            kind: "type_id",
            text: p_text,
            loc: p_loc,
        });
    }
    function makeDummyTypeId(p_text) {
        return astF.createNode({
            kind: "type_id",
            text: p_text,
            loc: emptySrcInfo,
        });
    }
    function makeOptionalType(p_typeArg, p_loc) {
        return astF.createNode({
            kind: "optional_type",
            typeArg: p_typeArg,
            loc: p_loc,
        });
    }
    function makeDummyOptionalType(p_typeArg) {
        return astF.createNode({
            kind: "optional_type",
            typeArg: p_typeArg,
            loc: emptySrcInfo,
        });
    }
    function makeMapType(p_keyType, p_keyStorageType, p_valueType, p_valueStorageType, p_loc) {
        return astF.createNode({
            kind: "map_type",
            keyType: p_keyType,
            keyStorageType: p_keyStorageType,
            valueType: p_valueType,
            valueStorageType: p_valueStorageType,
            loc: p_loc,
        });
    }
    function makeDummyMapType(p_keyType, p_keyStorageType, p_valueType, p_valueStorageType) {
        return astF.createNode({
            kind: "map_type",
            keyType: p_keyType,
            keyStorageType: p_keyStorageType,
            valueType: p_valueType,
            valueStorageType: p_valueStorageType,
            loc: emptySrcInfo,
        });
    }
    function makeBouncedMessageType(p_messageType, p_loc) {
        return astF.createNode({
            kind: "bounced_message_type",
            messageType: p_messageType,
            loc: p_loc,
        });
    }
    function makeDummyBouncedMessageType(p_messageType) {
        return astF.createNode({
            kind: "bounced_message_type",
            messageType: p_messageType,
            loc: emptySrcInfo,
        });
    }
    function makeOpBinary(p_op, p_left, p_right, p_loc) {
        return astF.createNode({
            kind: "op_binary",
            op: p_op,
            left: p_left,
            right: p_right,
            loc: p_loc,
        });
    }
    function makeDummyOpBinary(p_op, p_left, p_right) {
        return astF.createNode({
            kind: "op_binary",
            op: p_op,
            left: p_left,
            right: p_right,
            loc: emptySrcInfo,
        });
    }
    function makeOpUnary(p_op, p_operand, p_loc) {
        return astF.createNode({
            kind: "op_unary",
            op: p_op,
            operand: p_operand,
            loc: p_loc,
        });
    }
    function makeDummyOpUnary(p_op, p_operand) {
        return astF.createNode({
            kind: "op_unary",
            op: p_op,
            operand: p_operand,
            loc: emptySrcInfo,
        });
    }
    function makeConditional(p_condition, p_thenBranch, p_elseBranch, p_loc) {
        return astF.createNode({
            kind: "conditional",
            condition: p_condition,
            thenBranch: p_thenBranch,
            elseBranch: p_elseBranch,
            loc: p_loc,
        });
    }
    function makeDummyConditional(p_condition, p_thenBranch, p_elseBranch) {
        return astF.createNode({
            kind: "conditional",
            condition: p_condition,
            thenBranch: p_thenBranch,
            elseBranch: p_elseBranch,
            loc: emptySrcInfo,
        });
    }
    function makeMethodCall(p_self, p_method, p_args, p_loc) {
        return astF.createNode({
            kind: "method_call",
            self: p_self,
            method: p_method,
            args: p_args,
            loc: p_loc,
        });
    }
    function makeDummyMethodCall(p_self, p_method, p_args) {
        return astF.createNode({
            kind: "method_call",
            self: p_self,
            method: p_method,
            args: p_args,
            loc: emptySrcInfo,
        });
    }
    function makeFieldAccess(p_aggregate, p_field, p_loc) {
        return astF.createNode({
            kind: "field_access",
            aggregate: p_aggregate,
            field: p_field,
            loc: p_loc,
        });
    }
    function makeDummyFieldAccess(p_aggregate, p_field) {
        return astF.createNode({
            kind: "field_access",
            aggregate: p_aggregate,
            field: p_field,
            loc: emptySrcInfo,
        });
    }
    function makeStaticCall(p_function, p_args, p_loc) {
        return astF.createNode({
            kind: "static_call",
            function: p_function,
            args: p_args,
            loc: p_loc,
        });
    }
    function makeDummyStaticCall(p_function, p_args) {
        return astF.createNode({
            kind: "static_call",
            function: p_function,
            args: p_args,
            loc: emptySrcInfo,
        });
    }
    function makeStructInstance(p_type, p_args, p_loc) {
        return astF.createNode({
            kind: "struct_instance",
            type: p_type,
            args: p_args,
            loc: p_loc,
        });
    }
    function makeDummyStructInstance(p_type, p_args) {
        return astF.createNode({
            kind: "struct_instance",
            type: p_type,
            args: p_args,
            loc: emptySrcInfo,
        });
    }
    function makeId(p_text, p_loc) {
        return astF.createNode({
            kind: "id",
            text: p_text,
            loc: p_loc,
        });
    }
    function makeDummyId(p_text) {
        return astF.createNode({
            kind: "id",
            text: p_text,
            loc: emptySrcInfo,
        });
    }
    function makeInitOf(p_contract, p_args, p_loc) {
        return astF.createNode({
            kind: "init_of",
            contract: p_contract,
            args: p_args,
            loc: p_loc,
        });
    }
    function makeDummyInitOf(p_contract, p_args) {
        return astF.createNode({
            kind: "init_of",
            contract: p_contract,
            args: p_args,
            loc: emptySrcInfo,
        });
    }
    function makeCodeOf(p_contract, p_loc) {
        return astF.createNode({
            kind: "code_of",
            contract: p_contract,
            loc: p_loc,
        });
    }
    function makeDummyCodeOf(p_contract) {
        return astF.createNode({
            kind: "code_of",
            contract: p_contract,
            loc: emptySrcInfo,
        });
    }
    function makeNumber(p_base, p_value, p_loc) {
        return astF.createNode({
            kind: "number",
            base: p_base,
            value: p_value,
            loc: p_loc,
        });
    }
    function makeDummyNumber(p_base, p_value) {
        return astF.createNode({
            kind: "number",
            base: p_base,
            value: p_value,
            loc: emptySrcInfo,
        });
    }
    function makeBoolean(p_value, p_loc) {
        return astF.createNode({
            kind: "boolean",
            value: p_value,
            loc: p_loc,
        });
    }
    function makeDummyBoolean(p_value) {
        return astF.createNode({
            kind: "boolean",
            value: p_value,
            loc: emptySrcInfo,
        });
    }
    function makeNull(p_loc) {
        return astF.createNode({
            kind: "null",
            loc: p_loc,
        });
    }
    function makeDummyNull() {
        return astF.createNode({
            kind: "null",
            loc: emptySrcInfo,
        });
    }
    function makeString(p_value, p_loc) {
        return astF.createNode({
            kind: "string",
            value: p_value,
            loc: p_loc,
        });
    }
    function makeDummyString(p_value) {
        return astF.createNode({
            kind: "string",
            value: p_value,
            loc: emptySrcInfo,
        });
    }
    function makeAddress(p_value, p_loc) {
        return astF.createNode({
            kind: "address",
            value: p_value,
            loc: p_loc,
        });
    }
    function makeDummyAddress(p_value) {
        return astF.createNode({
            kind: "address",
            value: p_value,
            loc: emptySrcInfo,
        });
    }
    function makeCell(p_value, p_loc) {
        return astF.createNode({
            kind: "cell",
            value: p_value,
            loc: p_loc,
        });
    }
    function makeDummyCell(p_value) {
        return astF.createNode({
            kind: "cell",
            value: p_value,
            loc: emptySrcInfo,
        });
    }
    function makeSlice(p_value, p_loc) {
        return astF.createNode({
            kind: "slice",
            value: p_value,
            loc: p_loc,
        });
    }
    function makeDummySlice(p_value) {
        return astF.createNode({
            kind: "slice",
            value: p_value,
            loc: emptySrcInfo,
        });
    }
    function makeStructValue(p_type, p_args, p_loc) {
        return astF.createNode({
            kind: "struct_value",
            type: p_type,
            args: p_args,
            loc: p_loc,
        });
    }
    function makeDummyStructValue(p_type, p_args) {
        return astF.createNode({
            kind: "struct_value",
            type: p_type,
            args: p_args,
            loc: emptySrcInfo,
        });
    }
    function makeWildcard(p_loc) {
        return astF.createNode({
            kind: "wildcard",
            loc: p_loc,
        });
    }
    function makeDummyWildcard() {
        return astF.createNode({
            kind: "wildcard",
            loc: emptySrcInfo,
        });
    }
    function makeFunctionAttributeGet(p_methodId, p_loc) {
        return astF.createNode({
            kind: "function_attribute",
            type: "get",
            methodId: p_methodId,
            loc: p_loc,
        });
    }
    function makeDummyFunctionAttributeGet(p_methodId) {
        return astF.createNode({
            kind: "function_attribute",
            type: "get",
            methodId: p_methodId,
            loc: emptySrcInfo,
        });
    }
    function makeFunctionAttributeRest(p_type, p_loc) {
        return astF.createNode({
            kind: "function_attribute",
            type: p_type,
            loc: p_loc,
        });
    }
    function makeDummyFunctionAttributeRest(p_type) {
        return astF.createNode({
            kind: "function_attribute",
            type: p_type,
            loc: emptySrcInfo,
        });
    }
    function makeReceiverSimple(p_param) {
        return astF.createNode({
            kind: "simple",
            param: p_param,
        });
    }
    function makeReceiverFallback() {
        return astF.createNode({
            kind: "fallback",
        });
    }
    function makeReceiverComment(p_comment) {
        return astF.createNode({
            kind: "comment",
            comment: p_comment,
        });
    }
    function makeReceiverInternal(p_subKind, p_loc) {
        return astF.createNode({
            kind: "internal",
            subKind: p_subKind,
            loc: p_loc,
        });
    }
    function makeDummyReceiverInternal(p_subKind) {
        return astF.createNode({
            kind: "internal",
            subKind: p_subKind,
            loc: emptySrcInfo,
        });
    }
    function makeReceiverExternal(p_subKind, p_loc) {
        return astF.createNode({
            kind: "external",
            subKind: p_subKind,
            loc: p_loc,
        });
    }
    function makeDummyReceiverExternal(p_subKind) {
        return astF.createNode({
            kind: "external",
            subKind: p_subKind,
            loc: emptySrcInfo,
        });
    }
    function makeReceiverBounce(p_param, p_loc) {
        return astF.createNode({
            kind: "bounce",
            param: p_param,
            loc: p_loc,
        });
    }
    function makeDummyReceiverBounce(p_param) {
        return astF.createNode({
            kind: "bounce",
            param: p_param,
            loc: emptySrcInfo,
        });
    }
    function makeFuncId(p_text, p_loc) {
        return astF.createNode({
            kind: "func_id",
            text: p_text,
            loc: p_loc,
        });
    }
    function makeDummyFuncId(p_text) {
        return astF.createNode({
            kind: "func_id",
            text: p_text,
            loc: emptySrcInfo,
        });
    }
    function makeDestructMapping(p_field, p_name, p_loc) {
        return astF.createNode({
            kind: "destruct_mapping",
            field: p_field,
            name: p_name,
            loc: p_loc,
        });
    }
    function makeDummyDestructMapping(p_field, p_name) {
        return astF.createNode({
            kind: "destruct_mapping",
            field: p_field,
            name: p_name,
            loc: emptySrcInfo,
        });
    }
    function makeDestructEnd(p_ignoreUnspecifiedFields, p_loc) {
        return astF.createNode({
            kind: "destruct_end",
            ignoreUnspecifiedFields: p_ignoreUnspecifiedFields,
            loc: p_loc,
        });
    }
    function makeDummyDestructEnd(p_ignoreUnspecifiedFields) {
        return astF.createNode({
            kind: "destruct_end",
            ignoreUnspecifiedFields: p_ignoreUnspecifiedFields,
            loc: emptySrcInfo,
        });
    }
    function makeTypedParameter(p_name, p_type, p_loc) {
        return astF.createNode({
            kind: "typed_parameter",
            name: p_name,
            type: p_type,
            loc: p_loc,
            as: undefined,
        });
    }
    function makeDummyTypedParameter(p_name, p_type) {
        return astF.createNode({
            kind: "typed_parameter",
            name: p_name,
            type: p_type,
            loc: emptySrcInfo,
            as: undefined,
        });
    }
    function makeModule(p_imports, p_items) {
        return astF.createNode({
            kind: "module",
            imports: p_imports,
            items: p_items,
        });
    }
    function makeStructFieldInitializer(p_field, p_initializer, p_loc) {
        return astF.createNode({
            kind: "struct_field_initializer",
            field: p_field,
            initializer: p_initializer,
            loc: p_loc,
        });
    }
    function makeDummyStructFieldInitializer(p_field, p_initializer) {
        return astF.createNode({
            kind: "struct_field_initializer",
            field: p_field,
            initializer: p_initializer,
            loc: emptySrcInfo,
        });
    }
    function makeStructFieldValue(p_field, p_initializer, p_loc) {
        return astF.createNode({
            kind: "struct_field_value",
            field: p_field,
            initializer: p_initializer,
            loc: p_loc,
        });
    }
    function makeDummyStructFieldValue(p_field, p_initializer) {
        return astF.createNode({
            kind: "struct_field_value",
            field: p_field,
            initializer: p_initializer,
            loc: emptySrcInfo,
        });
    }
    function makeImport(p_importPath, p_loc) {
        return astF.createNode({
            kind: "import",
            importPath: p_importPath,
            loc: p_loc,
        });
    }
    function makeDummyImport(p_importPath) {
        return astF.createNode({
            kind: "import",
            importPath: p_importPath,
            loc: emptySrcInfo,
        });
    }
    return {
        makePrimitiveTypeDecl,
        makeDummyPrimitiveTypeDecl,
        makeFunctionDef,
        makeDummyFunctionDef,
        makeAsmFunctionDef,
        makeDummyAsmFunctionDef,
        makeNativeFunctionDecl,
        makeDummyNativeFunctionDecl,
        makeConstantDef,
        makeDummyConstantDef,
        makeStructDecl,
        makeDummyStructDecl,
        makeMessageDecl,
        makeDummyMessageDecl,
        makeContract,
        makeDummyContract,
        makeTrait,
        makeDummyTrait,
        makeFieldDecl,
        makeDummyFieldDecl,
        makeContractInit,
        makeDummyContractInit,
        makeReceiver,
        makeDummyReceiver,
        makeFunctionDecl,
        makeDummyFunctionDecl,
        makeConstantDecl,
        makeDummyConstantDecl,
        makeStatementLet,
        makeDummyStatementLet,
        makeStatementReturn,
        makeDummyStatementReturn,
        makeStatementExpression,
        makeDummyStatementExpression,
        makeStatementAssign,
        makeDummyStatementAssign,
        makeStatementAugmentedAssign,
        makeDummyStatementAugmentedAssign,
        makeStatementCondition,
        makeDummyStatementCondition,
        makeStatementWhile,
        makeDummyStatementWhile,
        makeStatementUntil,
        makeDummyStatementUntil,
        makeStatementRepeat,
        makeDummyStatementRepeat,
        makeStatementTry,
        makeDummyStatementTry,
        makeStatementForEach,
        makeDummyStatementForEach,
        makeStatementDestruct,
        makeDummyStatementDestruct,
        makeStatementBlock,
        makeDummyStatementBlock,
        makeTypeId,
        makeDummyTypeId,
        makeOptionalType,
        makeDummyOptionalType,
        makeMapType,
        makeDummyMapType,
        makeBouncedMessageType,
        makeDummyBouncedMessageType,
        makeOpBinary,
        makeDummyOpBinary,
        makeOpUnary,
        makeDummyOpUnary,
        makeConditional,
        makeDummyConditional,
        makeMethodCall,
        makeDummyMethodCall,
        makeFieldAccess,
        makeDummyFieldAccess,
        makeStaticCall,
        makeDummyStaticCall,
        makeStructInstance,
        makeDummyStructInstance,
        makeId,
        makeDummyId,
        makeInitOf,
        makeDummyInitOf,
        makeCodeOf,
        makeDummyCodeOf,
        makeNumber,
        makeDummyNumber,
        makeBoolean,
        makeDummyBoolean,
        makeNull,
        makeDummyNull,
        makeString,
        makeDummyString,
        makeAddress,
        makeDummyAddress,
        makeCell,
        makeDummyCell,
        makeSlice,
        makeDummySlice,
        makeStructValue,
        makeDummyStructValue,
        makeWildcard,
        makeDummyWildcard,
        makeFunctionAttributeGet,
        makeDummyFunctionAttributeGet,
        makeFunctionAttributeRest,
        makeDummyFunctionAttributeRest,
        makeReceiverSimple,
        makeReceiverFallback,
        makeReceiverComment,
        makeReceiverInternal,
        makeDummyReceiverInternal,
        makeReceiverExternal,
        makeDummyReceiverExternal,
        makeReceiverBounce,
        makeDummyReceiverBounce,
        makeFuncId,
        makeDummyFuncId,
        makeDestructMapping,
        makeDummyDestructMapping,
        makeDestructEnd,
        makeDummyDestructEnd,
        makeTypedParameter,
        makeDummyTypedParameter,
        makeModule,
        makeStructFieldInitializer,
        makeDummyStructFieldInitializer,
        makeStructFieldValue,
        makeDummyStructFieldValue,
        makeImport,
        makeDummyImport,
    };
};
exports.getMakeAst = getMakeAst;
